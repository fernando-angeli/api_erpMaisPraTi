name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3
        
        # Configurar o agente SSH
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      # Definir variáveis de ambiente a partir dos GitHub Secrets
      - name: Set environment variables
        run: |
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
          echo "APP_PROFILE=${{ secrets.APP_PROFILE }}" >> $GITHUB_ENV
          echo "EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}" >> $GITHUB_ENV
          echo "EMAIL_USER=${{ secrets.EMAIL_USER }}" >> $GITHUB_ENV
          echo "JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}" >> $GITHUB_ENV
          echo "JWT_EXPIRATION_RECOVERY=${{ secrets.JWT_EXPIRATION_RECOVERY }}" >> $GITHUB_ENV          

      # Configurar o JDK para o build
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'corretto'
      
      # Build do projeto
      - name: Build project
        run: mvn clean package

      # Instalar o Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
          
      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v2

     # Construir as imagens Docker
      - name: Construir as imagens Docker
        run: docker-compose -f docker-compose.yml build

     # Derrubar container antes de subir nova instancia
      - name: Derrubar containers Docker antes de subir novo
        run: docker-compose down
        
      # Subir os contêineres Docker em segundo plano
      - name: Subir containers Docker
        run: docker-compose -f docker-compose.yml up -d

      # Aguardar a inicialização do contêiner (opcional)
      - name: Aguardar contêineres estarem prontos
        run: |
          docker ps -a
          docker ps
          
      # - name: Tornar script executável
      #   run: chmod +x ./run-tests.sh

      # - name: Rodar testes (se houver)
      #   run: docker exec api-erp ./run-tests.sh 

      - name: Copiar arquivos para a EC2
        run: |
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" ./ ec2-user@${{ secrets.IP_EC2 }}:/home/ec2-user/api
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.IP_EC2 }} "rm -rf /home/ec2-user/api/* && mkdir -p /home/ec2-user/api"
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" ./ ec2-user@${{ secrets.IP_EC2 }}:/home/ec2-user/api
          
      - name: Deploy na EC2
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.IP_EC2 }} << 'EOF'
            cd /home/ec2-user/api
            docker-compose -f /home/ec2-user/api/docker-compose.yml stop api-erp
            docker-compose -f /home/ec2-user/api/docker-compose.yml rm -f api-erp
            docker-compose -f /home/ec2-user/api/docker-compose.yml up -d --build
          EOF
