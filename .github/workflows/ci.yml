name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v3
        
        # Configurar o agente SSH
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      # Definir variáveis de ambiente a partir dos GitHub Secrets
      - name: Set environment variables
        run: |
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
          echo "APP_PROFILE=${{ secrets.APP_PROFILE }}" >> $GITHUB_ENV
          echo "EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}" >> $GITHUB_ENV
          echo "EMAIL_USER=${{ secrets.EMAIL_USER }}" >> $GITHUB_ENV
          echo "JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}" >> $GITHUB_ENV
          echo "JWT_EXPIRATION_RECOVERY=${{ secrets.JWT_EXPIRATION_RECOVERY }}" >> $GITHUB_ENV          

      # Configurar o JDK para o build
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'corretto'
      
      - name: Build project
        run: mvn clean package
      
      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Construir as imagens Docker
        run: docker-compose -f docker-compose.yml build

      - name: Subir containers Docker (Testar localmente)
        run: docker-compose -f docker-compose.yml up -d

      - name: Rodar testes (se houver)
        run: docker exec api-erp ./run-tests.sh 

      - name: Copiar arquivos para a EC2
        run: |
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" ./ ec2-user@${{ secrets.IP_EC2 }}:/home/ec2-user/api

      - name: Deploy na EC2
        run: |
          ssh -i /path/to/your-key.pem ec2-user@${{ secrets.IP_EC2 }} 'docker-compose -f /path/to/your/docker-compose.yml up -d'
